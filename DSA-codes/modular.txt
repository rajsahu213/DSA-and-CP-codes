(a+b)%m=(a%m+b%m)%m

(a-b)%m=[a%m-b%m+m]%m

(a*b)%m=((a%m)*(b%m))%m
for multiplication take long long int

(a^b)%m=

int power(int a,int low(0),int high(b-1),int m)
{
	if(low<high)
	{
		int mid=low+(high-low)/2;
		int ans1=power(a,low,mid,m);
		int ans2=power(a,mid+1,high,m);
		return ((ans1%m)*(ans2%m)%m);
	}
}


ll power(ll a, ll b,ll m)
{
	if(b==0)return 1;
	else if(b==1)return a%m;
	else
	{
		ll temp=power(a,b/2,m);
		if(b%2==0)
		{
			return (temp*temp)%m;
		}
		else
		{
			ll c=(temp*temp)%m;
			c=(c*a)%m;
			return c;
		}
	}
}

Modular Inverse

if(m is prime)
{
	mod inverse of a w.r.t m
	(a^(m-2))%m
	a^(m-2)=1/a
}
else
{
	solve in linear time

}

(a/b)%m=(a* 1/b)%m=(a*b^(m-2))%m




(a^b)^c=(b^c)%(m-1)=d
			then (a^d)%m


Bit operations

| - or
% - and
^ - xor
>> - RS
<< - LS

1 << n gives 2^n

finding set bit
3rd bit is set or not	

n=10110001

if(1<<3 & n)
{
	//bit is set
}
else
{
	//not set
}

seting a bit

a | (1<<n)

unseting

a & ~(1<<n)

flippping a nth bit

a^(1<<n)

xor

a^b=c <=> a=b^c

swap(a,b)
{
	a^=b;
	b^=a;
	a^=b;
}

if odd(a&1)
else even
//to check if a is a power of 2 or not
check if power of 2^ !(a&(a-1))


sieve of eratosthenese

